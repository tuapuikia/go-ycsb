name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["linux", "darwin"]
        arch: ["amd64", "arm64"]
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Build for ${{ matrix.os }}-${{ matrix.arch }}
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          make
          tar -C bin -zcf go-ycsb-$GOOS-$GOARCH.tar.gz go-ycsb

      - name: Release latest build
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'push'
        with:
          name: Latest Build
          tag_name: latest-${{ github.sha }}
          files: |
            *.tar.gz
      - name: Clean legacy latest releases
        uses: actions/github-script@v6
        if: github.event_name == 'push'
        with:
          script: |
            const { owner, repo } = context.repo;
            const releases = (await github.rest.repos.listReleases({ owner, repo })).data.filter(r => r.draft && r.tag_name.startsWith('latest'));
            for (const r of releases) { await github.rest.repos.deleteRelease({ owner, repo, release_id: r.id }).catch(_ => {}); }
      - name: Clean legacy latest tags
        if: github.event_name == 'push'
        run: |
          git tag -l | grep latest | grep -v latest-${{ github.sha }} | xargs -I{} git push -d origin {} || true
